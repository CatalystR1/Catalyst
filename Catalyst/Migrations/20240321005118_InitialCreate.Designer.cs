// <auto-generated />
using System;
using Catalyst.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Catalyst.Migrations
{
    [DbContext(typeof(CatalystContext))]
    [Migration("20240321005118_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Catalyst.Models.TblAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<double>("DiscordUserId")
                        .HasColumnType("float")
                        .HasColumnName("DiscordUserID");

                    b.Property<string>("McaccountName")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("char(16)")
                        .HasColumnName("MCAccountName")
                        .IsFixedLength();

                    b.Property<int>("ServerId")
                        .HasColumnType("int")
                        .HasColumnName("ServerID");

                    b.Property<DateTime>("SysEndTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("SysEndTime");

                    b.Property<DateTime>("SysStartTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("SysStartTime");

                    b.HasKey("AccountId");

                    b.HasIndex("ServerId");

                    b.ToTable("tblAccounts", null, t =>
                        {
                            t.HasComment("Registered Discord Accounts");
                        });

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MSSQL_tblAccounts_History", "dbo");
                                ttb
                                    .HasPeriodStart("SysStartTime")
                                    .HasColumnName("SysStartTime");
                                ttb
                                    .HasPeriodEnd("SysEndTime")
                                    .HasColumnName("SysEndTime");
                            }));
                });

            modelBuilder.Entity("Catalyst.Models.TblBan", b =>
                {
                    b.Property<int>("BanId")
                        .HasColumnType("int")
                        .HasColumnName("BanID");

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<DateTime>("BanCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("BanExpiration")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<bool>("PermBan")
                        .HasColumnType("bit");

                    b.Property<int>("ServerId")
                        .HasColumnType("int")
                        .HasColumnName("ServerID");

                    b.Property<DateTime>("SysEndTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("SysEndTime");

                    b.Property<DateTime>("SysStartTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("SysStartTime");

                    b.HasKey("BanId");

                    b.HasIndex("AccountId");

                    b.ToTable("tblBans", null, t =>
                        {
                            t.HasComment("Discord Bans");
                        });

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MSSQL_tblBans_History", "dbo");
                                ttb
                                    .HasPeriodStart("SysStartTime")
                                    .HasColumnName("SysStartTime");
                                ttb
                                    .HasPeriodEnd("SysEndTime")
                                    .HasColumnName("SysEndTime");
                            }));
                });

            modelBuilder.Entity("Catalyst.Models.TblServer", b =>
                {
                    b.Property<int>("ServerId")
                        .HasColumnType("int")
                        .HasColumnName("ServerID");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<double>("DiscordGuildId")
                        .HasColumnType("float")
                        .HasColumnName("DiscordGuildID");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SysEndTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("SysEndTime");

                    b.Property<DateTime>("SysStartTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("SysStartTime");

                    b.HasKey("ServerId");

                    b.ToTable("tblServers", null, t =>
                        {
                            t.HasComment("Registered Discord Guilds");
                        });

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MSSQL_tblServers_History", "dbo");
                                ttb
                                    .HasPeriodStart("SysStartTime")
                                    .HasColumnName("SysStartTime");
                                ttb
                                    .HasPeriodEnd("SysEndTime")
                                    .HasColumnName("SysEndTime");
                            }));
                });

            modelBuilder.Entity("Catalyst.Models.TblAccount", b =>
                {
                    b.HasOne("Catalyst.Models.TblServer", "Server")
                        .WithMany("TblAccounts")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblAccounts_tblServers");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Catalyst.Models.TblBan", b =>
                {
                    b.HasOne("Catalyst.Models.TblAccount", "Account")
                        .WithMany("TblBans")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblBans_tblAccounts");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Catalyst.Models.TblAccount", b =>
                {
                    b.Navigation("TblBans");
                });

            modelBuilder.Entity("Catalyst.Models.TblServer", b =>
                {
                    b.Navigation("TblAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
